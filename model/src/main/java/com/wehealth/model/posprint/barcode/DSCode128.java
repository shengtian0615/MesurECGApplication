package com.wehealth.model.posprint.barcode;

import java.util.ArrayList;
import java.util.List;

public class DSCode128 {

	//private static final char CODE128_MODE_A = 'a';
	private static final char CODE128_MODE_B = 'b';
	private static final char CODE128_MODE_C = 'c';

	private static final int CODE128_INDEX_CODEC = 99;
	private static final int CODE128_INDEX_CODEB = 100;
	//private static final int CODE128_INDEX_CODEA = 101;
	//private static final int CODE128_INDEX_STARTA = 103;
	private static final int CODE128_INDEX_STARTB = 104;
	private static final int CODE128_INDEX_STARTC = 105;
	private static final int CODE128_INDEX_STOP = 106;

	private static final String[] code128_pattern_string = {
			// pattern, // i: pattern, bar/space widths
			"11011001100", // 0: 11011001100, 212222
			"11001101100", // 1: 11001101100, 222122
			"11001100110", // 2: 11001100110, 222221
			"10010011000", // 3: 10010011000, 121223
			"10010001100", // 4: 10010001100, 121322
			"10001001100", // 5: 10001001100, 131222
			"10011001000", // 6: 10011001000, 122213
			"10011000100", // 7: 10011000100, 122312
			"10001100100", // 8: 10001100100, 132212
			"11001001000", // 9: 11001001000, 221213
			"11001000100", // 10: 11001000100, 221312
			"11000100100", // 11: 11000100100, 231212
			"10110011100", // 12: 10110011100, 112232
			"10011011100", // 13: 10011011100, 122132
			"10011001110", // 14: 10011001110, 122231
			"10111001100", // 15: 10111001100, 113222
			"10011101100", // 16: 10011101100, 123122
			"10011100110", // 17: 10011100110, 123221
			"11001110010", // 18: 11001110010, 223211
			"11001011100", // 19: 11001011100, 221132
			"11001001110", // 20: 11001001110, 221231
			"11011100100", // 21: 11011100100, 213212
			"11001110100", // 22: 11001110100, 223112
			"11101101110", // 23: 11101101110, 312131
			"11101001100", // 24: 11101001100, 311222
			"11100101100", // 25: 11100101100, 321122
			"11100100110", // 26: 11100100110, 321221
			"11101100100", // 27: 11101100100, 312212
			"11100110100", // 28: 11100110100, 322112
			"11100110010", // 29: 11100110010, 322211
			"11011011000", // 30: 11011011000, 212123
			"11011000110", // 31: 11011000110, 212321
			"11000110110", // 32: 11000110110, 232121
			"10100011000", // 33: 10100011000, 111323
			"10001011000", // 34: 10001011000, 131123
			"10001000110", // 35: 10001000110, 131321
			"10110001000", // 36: 10110001000, 112313
			"10001101000", // 37: 10001101000, 132113
			"10001100010",// 38: 10001100010, 132311
			"11010001000",// 39: 11010001000, 211313
			"11000101000",// 40: 11000101000, 231113
			"11000100010",// 41: 11000100010, 231311
			"10110111000",// 42: 10110111000, 112133
			"10110001110",// 43: 10110001110
			"10001101110",// 44: 10001101110
			"10111011000",// 45: 10111011000, 113123
			"10111000110",// 46: 10111000110, 113321
			"10001110110", // 47: 10001110110, 133121
			"11101110110", // 48: 11101110110, 313121
			"11010001110", // 49: 11010001110, 211331
			"11000101110", // 50: 11000101110, 231131
			"11011101000", // 51: 11011101000, 213113
			"11011100010", // 52: 11011100010, 213311
			"11011101110", // 53: 11011101110, 213131
			"11101011000", // 54: 11101011000, 311123
			"11101000110", // 55: 11101000110, 311321
			"11100010110", // 56: 11100010110, 331121
			"11101101000", // 57: 11101101000, 312113
			"11101100010", // 58: 11101100010, 312311
			"11100011010", // 59: 11100011010, 332111
			"11101111010", // 60: 11101111010, 314111
			"11001000010", // 61: 11001000010, 221411
			"11110001010", // 62: 11110001010, 431111
			"10100110000", // 63: 10100110000, 111224
			"10100001100", // 64: 10100001100, 111422
			"10010110000", // 65: 10010110000, 121124
			"10010000110", // 66: 10010000110, 121421
			"10000101100", // 67: 10000101100, 141122
			"10000100110", // 68: 10000100110, 141221
			"10110010000", // 69: 10110010000, 112214
			"10110000100", // 70: 10110000100, 112412
			"10011010000", // 71: 10011010000, 122114
			"10011000010", // 72: 10011000010, 122411
			"10000110100", // 73: 10000110100, 142112
			"10000110010", // 74: 10000110010, 142211
			"11000010010", // 75: 11000010010, 241211
			"11001010000", // 76: 11001010000, 221114
			"11110111010", // 77: 11110111010, 413111
			"11000010100", // 78: 11000010100, 241112
			"10001111010", // 79: 10001111010, 134111
			"10100111100", // 80: 10100111100, 111242
			"10010111100", // 81: 10010111100, 121142
			"10010011110", // 82: 10010011110, 121241
			"10111100100", // 83: 10111100100, 114212
			"10011110100", // 84: 10011110100, 124112
			"10011110010", // 85: 10011110010, 124211
			"11110100100", // 86: 11110100100, 411212
			"11110010100", // 87: 11110010100, 421112
			"11110010010", // 88: 11110010010, 421211
			"11011011110", // 89: 11011011110, 212141
			"11011110110", // 90: 11011110110, 214121
			"11110110110", // 91: 11110110110, 412121
			"10101111000", // 92: 10101111000, 111143
			"10100011110", // 93: 10100011110, 111341
			"10001011110", // 94: 10001011110, 131141
			"10111101000", // 95: 10111101000, 114113
			"10111100010", // 96: 10111100010, 114311
			"11110101000", // 97: 11110101000, 411113
			"11110100010", // 98: 11110100010, 411311
			"10111011110", // 99: 10111011110, 113141
			"10111101110", // 100: 10111101110, 114131
			"11101011110", // 101: 11101011110, 311141
			"11110101110", // 102: 11110101110, 411131
			"11010000100", // 103: 11010000100, 211412
			"11010010000", // 104: 11010010000, 211214
			"11010011100", // 105: 11010011100, 211232
			"1100011101011", // 106: 1100011101011,
	};

	class CodeUnit {
		public char mode;
		public String str;

		public CodeUnit(char mode, String str) {
			this.mode = mode;
			this.str = str;
		}
	}

	public boolean[] Encode(String s) {
		List<CodeUnit> splits = new ArrayList<CodeUnit>();
		int i = 0;
		while (i < s.length()) {
			if (i + 1 < s.length()) {
				char c1 = s.charAt(i);
				char c2 = s.charAt(i + 1);
				if (c1 >= '0' && c1 <= '9' && c2 >= '0' && c2 <= '9') {
					CodeUnit unit = new CodeUnit(CODE128_MODE_C, "" + c1 + c2);
					splits.add(unit);
					i += 2;
					continue;
				} else if (c1 >= 32 && c1 <= 127) {
					CodeUnit unit = new CodeUnit(CODE128_MODE_B, "" + c1);
					splits.add(unit);
					i += 1;
					continue;
				} else {
					i += 1;
					continue;
				}
			} else {
				char c1 = s.charAt(i);
				if (c1 >= 32 && c1 <= 127) {
					CodeUnit unit = new CodeUnit(CODE128_MODE_B, "" + c1);
					splits.add(unit);
					i += 1;
					continue;
				} else {
					i += 1;
					continue;
				}
			}
		}

		List<CodeUnit> units = new ArrayList<CodeUnit>();
		for (i = 0; i < splits.size(); ++i) {
			if (units.size() == 0) {
				CodeUnit unit = new CodeUnit(splits.get(i).mode,
						splits.get(i).str);
				units.add(unit);
			} else {
				CodeUnit unit = units.get(units.size() - 1);
				if (splits.get(i).mode == unit.mode) {
					unit.str += splits.get(i).str;
				} else {
					unit = new CodeUnit(splits.get(i).mode, splits.get(i).str);
					units.add(unit);
				}
			}
		}

		List<Integer> ids = new ArrayList<Integer>();
		for (i = 0; i < units.size(); ++i)
		{
			CodeUnit unit = units.get(i);
			
			if(i == 0) {
				if(unit.mode == CODE128_MODE_C) {
					ids.add(CODE128_INDEX_STARTC);
				} else if (unit.mode == CODE128_MODE_B) {
					ids.add(CODE128_INDEX_STARTB);
				}
			} else {
				if(unit.mode == CODE128_MODE_C) {
					ids.add(CODE128_INDEX_CODEC);
				} else if (unit.mode == CODE128_MODE_B) {
					ids.add(CODE128_INDEX_CODEB);
				}
			}
			
			if(unit.mode == CODE128_MODE_C) {
				for(int j = 0; j < unit.str.length(); j += 2) {
					ids.add((10 * (unit.str.charAt(j) - '0') + (unit.str.charAt(j+1) - '0')));
				}
			} else if (unit.mode == CODE128_MODE_B) {
				for(int j = 0; j < unit.str.length(); j += 1) {
					ids.add(unit.str.charAt(j) - 32);
				}
			}
		}
		
		int check = 0;
		for(i = 0; i < ids.size(); ++i) {
			if( i == 0)
				check = ids.get(i);
			else
				check += i * ids.get(i);
		}
		check = check % 103;
		ids.add(check);
		ids.add(CODE128_INDEX_STOP);
		
		String scode = "";
		for(i = 0; i < ids.size(); ++i)
			scode += code128_pattern_string[ids.get(i)];
		
		boolean[] bcode = new boolean[scode.length()];
		for(i = 0; i < scode.length(); ++i)
			bcode[i] = (scode.charAt(i) == '1'); 
		
		return bcode;
	}

}
